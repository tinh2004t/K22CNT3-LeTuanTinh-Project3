import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import dayjs from 'dayjs';
import {
  getServices, addService, updateService, deleteService,
  getServiceFees, addServiceFee, updateServiceFee, deleteServiceFee,
  getApartments
} from "../api/serviceApi";
import {
  Button, Modal, Input, Table, message, DatePicker, Select, Card,
  Tabs, Form, InputNumber, Space, Divider, Popconfirm, Tag, Typography,
  Tooltip, notification, Spin
} from "antd";
import {
  EditOutlined, DeleteOutlined, PlusOutlined, AppstoreOutlined,
  DollarOutlined, EyeOutlined, ExclamationCircleOutlined, InfoCircleOutlined
} from "@ant-design/icons";

const { Option } = Select;
const { Title, Text } = Typography;
const { RangePicker } = DatePicker;
const userRole = localStorage.getItem("role");

const ServiceManagement = () => {
  const [services, setServices] = useState([]);
  const [serviceFees, setServiceFees] = useState([]);
  const [apartments, setApartments] = useState([]);
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();

  const handleNavigateToAddServiceFee = () => {
    navigate("/services/add-service-fees");
  };

  // Modal states
  const [serviceModalVisible, setServiceModalVisible] = useState(false);
  const [feeModalVisible, setFeeModalVisible] = useState(false);

  // Form states
  const [serviceForm] = Form.useForm();
  const [feeForm] = Form.useForm();

  // Current editing items
  const [currentServiceId, setCurrentServiceId] = useState(null);
  const [currentFeeId, setCurrentFeeId] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [servicesData, feesData, apartmentsData] = await Promise.all([
        getServices(),
        getServiceFees(),
        getApartments()
      ]);

      console.log("D·ªØ li·ªáu service fees t·ª´ API:", feesData);
      console.log("D·ªØ li·ªáu apartments t·ª´ API:", apartmentsData);

      setServices(servicesData);

      const updatedFees = feesData.map(fee => ({
        ...fee,
        serviceName: fee.service ? fee.service.serviceName : "Kh√¥ng x√°c ƒë·ªãnh",
        key: fee.serviceFeeId,
        apartmentId: fee.apartment ? fee.apartment.apartmentId : null // üîπ S·ª≠a l·ªói apartmentId null
      }));

      setServiceFees(updatedFees);

      // C·∫≠p nh·∫≠t danh s√°ch cƒÉn h·ªô t·ª´ API apartments
      const formattedApartments = apartmentsData.map(apartment => ({
        apartmentId: apartment.apartmentId,
        apartmentNumber: apartment.apartmentNumber
      }));

      setApartments(formattedApartments);
    } catch (error) {
      notification.error({
        message: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu."
      });
    } finally {
      setLoading(false);
    }
  };

  // üîπ Load d·ªØ li·ªáu v√†o form khi c·∫≠p nh·∫≠t
  useEffect(() => {
    if (currentFeeId) {
      const feeToEdit = serviceFees.find(fee => fee.serviceFeeId === currentFeeId);
      if (feeToEdit) {
        feeForm.setFieldsValue({
          serviceId: feeToEdit.service ? feeToEdit.service.serviceId : null,
          apartmentId: feeToEdit.apartment ? feeToEdit.apartment.apartmentId : null,
          dateRange: feeToEdit.startDate && feeToEdit.endDate ?
            [dayjs(feeToEdit.startDate), dayjs(feeToEdit.endDate)] : null,
          amount: feeToEdit.amount
        });
      }
    } else {
      feeForm.resetFields();
    }
  }, [currentFeeId, serviceFees]);

  const openFeeModalForUser = (service) => {
    setCurrentFeeId(null); // ƒê·∫£m b·∫£o form l√† ch·∫ø ƒë·ªô "th√™m m·ªõi"

    feeForm.setFieldsValue({
      serviceId: service.serviceId, // G√°n s·∫µn d·ªãch v·ª•
      apartmentId: null, // Ch·ªù user ch·ªçn cƒÉn h·ªô
      amount: parseFloat(service.price), // G√°n gi√° m·∫∑c ƒë·ªãnh t·ª´ d·ªãch v·ª•
      dateRange: null
    });

    setFeeModalVisible(true);
  };


  // Service handlers
  const openServiceModal = (service = null) => {
    setCurrentServiceId(service?.serviceId || null);

    if (service) {
      serviceForm.setFieldsValue({
        serviceName: service.serviceName,
        description: service.description,
        price: parseFloat(service.price)
      });
    } else {
      serviceForm.resetFields();
    }

    setServiceModalVisible(true);
  };

  const handleServiceSubmit = async () => {
    try {
      const values = await serviceForm.validateFields();
      setLoading(true);

      if (currentServiceId) {
        await updateService(currentServiceId, values);
        notification.success({ message: "C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng" });
      } else {
        await addService(values);
        notification.success({ message: "Th√™m d·ªãch v·ª• m·ªõi th√†nh c√¥ng" });
      }

      setServiceModalVisible(false);
      fetchData();
    } catch (error) {
      notification.error({
        message: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin d·ªãch v·ª•."
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteService = async (id) => {
    try {
      setLoading(true);
      await deleteService(id);
      notification.success({ message: "X√≥a d·ªãch v·ª• th√†nh c√¥ng" });
      fetchData();
    } catch (error) {
      notification.error({
        message: "Kh√¥ng th·ªÉ x√≥a d·ªãch v·ª•",
        description: "D·ªãch v·ª• n√†y c√≥ th·ªÉ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c ph√≠ d·ªãch v·ª•."
      });
    } finally {
      setLoading(false);
    }
  };

  // Service Fee handlers
  const openFeeModal = (fee = null) => {
    setCurrentFeeId(fee?.serviceFeeId || null);

    if (fee) {
      // S·ª≠ d·ª•ng dayjs ƒë·ªÉ chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√†nh ƒë·ªëi t∆∞·ª£ng dayjs
      const startDate = fee.startDate ? dayjs(fee.startDate) : null;
      const endDate = fee.endDate ? dayjs(fee.endDate) : null;

      feeForm.setFieldsValue({
        serviceId: fee.serviceId,
        apartmentId: fee.apartmentId,
        amount: parseFloat(fee.amount),
        // Ch·ªâ ƒë·∫∑t dateRange n·∫øu c·∫£ startDate v√† endDate ƒë·ªÅu h·ª£p l·ªá
        dateRange: startDate && endDate ? [startDate, endDate] : null
      });
    } else {
      feeForm.resetFields();
    }

    setFeeModalVisible(true);
  };

  const handleFeeSubmit = async () => {
    try {
      const values = await feeForm.validateFields();
      setLoading(true);

      // Ki·ªÉm tra n·∫øu `dateRange` kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë·ªß 2 gi√° tr·ªã
      if (!values.dateRange || values.dateRange.length < 2) {
        throw new Error("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th·ªùi gian √°p d·ª•ng.");
      }

      // H√†m chuy·ªÉn ƒë·ªïi ng√†y th√°ng sang ƒë·ªãnh d·∫°ng "YYYY-MM-DD"
      const formatDate = (date) => {
        return date ? date.format("YYYY-MM-DD") : null;
      };

      // ƒê·∫£m b·∫£o serviceId & apartmentId kh√¥ng b·ªã undefined/null
      if (!values.serviceId || !values.apartmentId) {
        throw new Error("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß D·ªãch v·ª• v√† CƒÉn h·ªô.");
      }

      const feeData = {
        amount: values.amount,
        startDate: formatDate(values.dateRange[0]), // ‚úÖ Chuy·ªÉn ƒë·ªïi format ng√†y
        endDate: formatDate(values.dateRange[1]),
        service: { serviceId: values.serviceId }, // ‚úÖ ƒê·∫£m b·∫£o serviceId l√† object
        apartment: { apartmentId: values.apartmentId } // ‚úÖ ƒê·∫£m b·∫£o apartmentId l√† object
      };

      console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", feeData); // Ki·ªÉm tra tr∆∞·ªõc khi g·ª≠i API

      if (currentFeeId) {
        await updateServiceFee(currentFeeId, feeData);
        notification.success({ message: "C·∫≠p nh·∫≠t ph√≠ d·ªãch v·ª• th√†nh c√¥ng!" });
      } else {
        await addServiceFee(feeData);
        notification.success({ message: "Th√™m ph√≠ d·ªãch v·ª• m·ªõi th√†nh c√¥ng!" });
      }

      setFeeModalVisible(false);
      fetchData(); // Refresh l·∫°i d·ªØ li·ªáu
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω submit:", error);
      notification.error({
        message: "L·ªói",
        description: error.message || "C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin ph√≠ d·ªãch v·ª•."
      });
    } finally {
      setLoading(false);
    }
  };


  const handleDeleteFee = async (id) => {
    try {
      setLoading(true);
      await deleteServiceFee(id);
      notification.success({ message: "X√≥a ph√≠ d·ªãch v·ª• th√†nh c√¥ng" });
      fetchData();
    } catch (error) {
      notification.error({
        message: "Kh√¥ng th·ªÉ x√≥a ph√≠ d·ªãch v·ª•",
        description: "C√≥ l·ªói x·∫£y ra khi x√≥a ph√≠ d·ªãch v·ª•."
      });
    } finally {
      setLoading(false);
    }
  };

  // Format currency helper
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
  };

  // Format date helper
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
  };

  // Check status helper
  const getServiceFeeStatus = (startDate, endDate) => {
    const now = new Date();
    const start = new Date(startDate);
    const end = new Date(endDate);

    if (now < start) {
      return { text: 'S·∫Øp √°p d·ª•ng', color: 'blue' };
    } else if (now > end) {
      return { text: 'H·∫øt h·∫°n', color: 'gray' };
    } else {
      return { text: 'ƒêang √°p d·ª•ng', color: 'green' };
    }
  };

  // Table columns
  const serviceColumns = [
    {
      title: "T√™n d·ªãch v·ª•",
      dataIndex: "serviceName",
      key: "serviceName",
      sorter: (a, b) => a.serviceName.localeCompare(b.serviceName),
      render: (text) => <Text strong>{text}</Text>
    },
    {
      title: "M√¥ t·∫£",
      dataIndex: "description",
      key: "description",
      ellipsis: {
        showTitle: false,
      },
      render: (description) => (
        <Tooltip placement="topLeft" title={description}>
          {description}
        </Tooltip>
      ),
    },
    {
      title: "Gi√° c∆° b·∫£n",
      dataIndex: "price",
      key: "price",
      sorter: (a, b) => a.price - b.price,
      render: (price) => <Text type="success">{formatCurrency(price)}</Text>
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      width: 200,
      render: (_, record) => (
        <Space>
          {userRole === "ADMIN" && (
            <>
              <Tooltip title="Ch·ªânh s·ª≠a">
                <Button
                  type="primary"
                  ghost
                  icon={<EditOutlined />}
                  onClick={() => openServiceModal(record)}
                />
              </Tooltip>
              <Tooltip title="X√≥a">
                <Popconfirm
                  title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªãch v·ª• n√†y?"
                  onConfirm={() => handleDeleteService(record.serviceId)}
                  okText="X√≥a"
                  cancelText="H·ªßy"
                  icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}
                >
                  <Button danger icon={<DeleteOutlined />} />
                </Popconfirm>
              </Tooltip>
            </>
          )}
          {userRole === "USER" && (
            <Tooltip title="ƒêƒÉng k√Ω d·ªãch v·ª•">
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={handleNavigateToAddServiceFee}
              >
                ƒêƒÉng k√Ω d·ªãch v·ª•
              </Button>
            </Tooltip>
          )}
        </Space>
      ),
    },
  ];


  const serviceFeeColumns = [
    {
      title: "D·ªãch v·ª•",
      dataIndex: "serviceName",
      key: "serviceName",
      sorter: (a, b) => a.serviceName.localeCompare(b.serviceName),
    },
    {
      title: "CƒÉn h·ªô",
      dataIndex: ["apartment", "apartmentNumber"], // ‚úÖ L·∫•y s·ªë cƒÉn h·ªô t·ª´ "apartment"
      key: "apartment",
      render: (apartment) => {
        console.log("apartment:", apartment);
        return apartment ? apartment : <Text type="danger">Kh√¥ng x√°c ƒë·ªãnh</Text>;
      }
    },


    {
      title: "Gi√° d·ªãch v·ª•",
      dataIndex: "amount",
      key: "amount",
      sorter: (a, b) => a.amount - b.amount,
      render: (amount) => <Text type="success">{formatCurrency(amount)}</Text>
    },
    {
      title: "Th·ªùi gian √°p d·ª•ng",
      key: "dateRange",
      render: (_, record) => (
        <Space direction="vertical" size={0}>
          <Text>B·∫Øt ƒë·∫ßu: {formatDate(record.startDate)}</Text>
          <Text>K·∫øt th√∫c: {formatDate(record.endDate)}</Text>
        </Space>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      key: "status",
      render: (_, record) => {
        const status = getServiceFeeStatus(record.startDate, record.endDate);
        return <Tag color={status.color}>{status.text}</Tag>;
      }
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      width: 180,
      render: (_, record) => (
        <Space>
          <Tooltip title="Ch·ªânh s·ª≠a">
            <Button
              type="primary"
              ghost
              icon={<EditOutlined />}
              onClick={() => openFeeModal(record)}
            />
          </Tooltip>
          <Tooltip title="X√≥a">
            <Popconfirm
              title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≠ d·ªãch v·ª• n√†y?"
              onConfirm={() => handleDeleteFee(record.serviceFeeId)}
              okText="X√≥a"
              cancelText="H·ªßy"
              icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}
            >
              <Button danger icon={<DeleteOutlined />} />
            </Popconfirm>
          </Tooltip>
        </Space>
      ),
    },
  ];

  // Define items for Tabs
  const tabItems = [
    {
      key: "1",
      label: (
        <span>
          <AppstoreOutlined />
          Qu·∫£n l√Ω D·ªãch v·ª•
        </span>
      ),
      children: (
        <Card className="card-container">
          <div className="table-header">
            <Title level={4}>Danh s√°ch D·ªãch v·ª•</Title>
            {userRole === "ADMIN" && (
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={() => openServiceModal()}
              >
                Th√™m D·ªãch v·ª•
              </Button>
            )}
          </div>
          <Table
            dataSource={services}
            columns={serviceColumns}
            rowKey="serviceId"
            pagination={{ pageSize: 10 }}
            bordered
          />
        </Card>
      )
    },
    userRole === "ADMIN" && {
      key: "2",
      label: (
        <span>
          <DollarOutlined />
          Qu·∫£n l√Ω Ph√≠ D·ªãch v·ª•
        </span>
      ),
      children: (
        <Card className="card-container">
          <div className="table-header">
            <Title level={4}>Danh s√°ch Ph√≠ D·ªãch v·ª•</Title>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleNavigateToAddServiceFee}
            >
              Th√™m Ph√≠ D·ªãch v·ª•
            </Button>
          </div>
          <Table
            dataSource={serviceFees}
            columns={serviceFeeColumns}
            rowKey="serviceFeeId"
            pagination={{ pageSize: 10 }}
            bordered
          />
        </Card>
      )
    }
  ].filter(Boolean); // Lo·∫°i b·ªè ph·∫ßn t·ª≠ `false` n·∫øu userRole !== "ADMIN"

  // H√†m t√≠nh to√°n gi√° d·ªãch v·ª• t·ª± ƒë·ªông
  const [calculatedAmount, setCalculatedAmount] = useState(0);

  const handleAutoCalculate = (values) => {
    const { serviceId, dateRange } = values;
    if (!serviceId || !dateRange || dateRange.length < 2) return;

    const selectedService = services.find(service => service.serviceId === serviceId);
    if (!selectedService) return;

    const startDate = dateRange[0];
    const endDate = dateRange[1];

    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c·ªßa dayjs/moment ƒë·ªÉ t√≠nh s·ªë ng√†y
    // N·∫øu s·ª≠ d·ª•ng dayjs:
    const days = endDate.diff(startDate, 'day') + 1;
    // N·∫øu s·ª≠ d·ª•ng moment:
    // const days = endDate.diff(startDate, 'days') + 1;

    const calculatedPrice = selectedService.price * days;
    setCalculatedAmount(calculatedPrice);

    // C·∫≠p nh·∫≠t form field
    feeForm.setFieldsValue({ amount: calculatedPrice });
  };
  return (
    <div className="service-management">
      <Spin spinning={loading}>
        <Tabs defaultActiveKey="1" items={tabItems} />
      </Spin>

      {/* Service Modal */}
      <Modal
        title={currentServiceId ? "C·∫≠p nh·∫≠t d·ªãch v·ª•" : "Th√™m d·ªãch v·ª• m·ªõi"}
        open={serviceModalVisible}
        onOk={handleServiceSubmit}
        onCancel={() => setServiceModalVisible(false)}
        confirmLoading={loading}
        width={600}
      >
        <Form
          form={serviceForm}
          layout="vertical"
        >
          <Form.Item
            name="serviceName"
            label="T√™n d·ªãch v·ª•"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•!' }]}
          >
            <Input placeholder="Nh·∫≠p t√™n d·ªãch v·ª•" />
          </Form.Item>
          <Form.Item
            name="description"
            label="M√¥ t·∫£"
          >
            <Input.TextArea
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª•"
              rows={4}
            />
          </Form.Item>
          <Form.Item
            name="price"
            label="Gi√° c∆° b·∫£n (VNƒê)"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p gi√° d·ªãch v·ª•!' }]}
          >
            <InputNumber
              style={{ width: '100%' }}
              formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
              parser={value => value.replace(/\$\s?|(,*)/g, '')}
              placeholder="Nh·∫≠p gi√° d·ªãch v·ª•"
              min={0}
            />
          </Form.Item>
        </Form>
      </Modal>

      {/* Service Fee Modal */}
      <Modal
        title={currentFeeId ? "C·∫≠p nh·∫≠t ph√≠ d·ªãch v·ª•" : "Th√™m ph√≠ d·ªãch v·ª• m·ªõi"}
        open={feeModalVisible}
        onOk={handleFeeSubmit}
        onCancel={() => setFeeModalVisible(false)}
        confirmLoading={loading}
        width={600}
      >
        <Form
          form={feeForm}
          layout="vertical"
          onValuesChange={(_, values) => handleAutoCalculate(values)}
        >
          <Form.Item
            name="serviceId"
            label="D·ªãch v·ª•"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn d·ªãch v·ª•!' }]}
          >
            <Select placeholder="Ch·ªçn d·ªãch v·ª•">
              {services.map(service => (
                <Option key={service.serviceId} value={service.serviceId}>
                  {service.serviceName} - {formatCurrency(service.price)}
                </Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item
            name="apartmentId"
            label="CƒÉn h·ªô"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn cƒÉn h·ªô!' }]}
          >
            <Select placeholder="Ch·ªçn cƒÉn h·ªô">
              {apartments.map(apt => (
                <Option key={apt.apartmentId} value={apt.apartmentId}>
                  {apt.apartmentNumber}
                </Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item
            name="dateRange"
            label="Th·ªùi gian √°p d·ª•ng"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian √°p d·ª•ng!' }]}
          >
            <RangePicker
              style={{ width: '100%' }}
              format="DD/MM/YYYY"
            />
          </Form.Item>
          <Form.Item
            name="amount"  // Th√™m name ƒë·ªÉ form c√≥ th·ªÉ l·∫•y gi√° tr·ªã n√†y khi submit
            label="Gi√° d·ªãch v·ª• (VNƒê)"
            rules={[{ required: true, message: 'Gi√° d·ªãch v·ª• kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!' }]}
          >
            <InputNumber
              style={{ width: '100%' }}
              formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
              parser={value => value.replace(/\$\s?|(,*)/g, '')}
              disabled={true}  // Gi·ªØ disabled ƒë·ªÉ ng∆∞·ªùi d√πng kh√¥ng th·ªÉ s·ª≠a
            // Kh√¥ng c·∫ßn value v√† onChange ·ªü ƒë√¢y v√¨ form s·∫Ω qu·∫£n l√Ω gi√° tr·ªã
            />
          </Form.Item>
        </Form>
      </Modal>

      <style jsx>{`
      .service-management {
        padding: 20px;
      }
      .card-container {
        margin-bottom: 24px;
      }
      .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
      }
    `}</style>
    </div>
  );



};



export default ServiceManagement;